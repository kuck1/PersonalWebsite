{"version":3,"sources":["App.js","components/index.js","serviceWorker.js","index.js"],"names":["App","React","createClass","render","charSet","name","content","href","rel","role","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","aria-haspopup","aria-labelledby","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAKeA,G,MCDHC,IAAMC,YAAY,CAAC,YAAD,QAC5BC,OAAQ,WACN,OACE,6BACE,2EACA,0BAAMC,QAAQ,UACd,0BAAMC,KAAK,WAAWC,QAAQ,0DAC9B,0BAAMC,KAAK,2GAA2GC,IAAI,eAC1H,0BAAMA,IAAI,gBAAgBD,KAAK,mBAC/B,0BAAMA,KAAK,oEAAoEC,IAAI,eACnF,0BAAMA,IAAI,aAAaD,KAAK,sBAC5B,0BAAMC,IAAI,aAAaD,KAAK,oBAC5B,0BAAMC,IAAI,aAAaD,KAAK,6BAC5B,0BAAMC,IAAI,aAAaD,KAAK,gBAC5B,0BAAMC,IAAI,aAAaD,KAAK,2BAC5B,0BAAMC,IAAI,aAAaD,KAAK,wCAC5B,0BAAMC,IAAI,aAAaD,KAAK,+CAC5B,0BAAMC,IAAI,aAAaD,KAAK,qCAE5B,0BAAMC,IAAI,aAAaD,KAAK,kBAC5B,4BAAQE,KAAK,UACX,yBAAKC,UAAU,+CACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,eAAeH,KAAK,cAAjC,WACA,4BAAQG,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,oBAAoBC,gBAAc,mBAAmBC,gBAAc,QAAQC,aAAW,qBACxK,0BAAMN,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BO,GAAG,oBAC3C,wBAAIP,UAAU,mCACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,kBAAkBH,KAAK,cAApC,aAEF,wBAAIG,UAAU,YACZ,uBAAGA,UAAU,WAAWH,KAAK,gBAA7B,YAEF,wBAAIG,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BH,KAAK,gBAAgBU,GAAG,aAAaL,cAAY,WAAWM,gBAAc,OAAOH,gBAAc,SAAvI,YACA,yBAAKL,UAAU,gBAAgBS,kBAAgB,cAC7C,uBAAGT,UAAU,gBAAgBH,KAAK,iBAAlC,kBACA,uBAAGG,UAAU,gBAAgBH,KAAK,iBAAlC,gBACA,uBAAGG,UAAU,gBAAgBH,KAAK,iBAAlC,qBAGJ,wBAAIG,UAAU,YACZ,uBAAGA,UAAU,WAAWH,KAAK,cAA7B,UAEF,wBAAIG,UAAU,YACZ,uBAAGA,UAAU,WAAWH,KAAK,aAA7B,SAEF,wBAAIG,UAAU,YACZ,uBAAGA,UAAU,WAAWH,KAAK,gBAA7B,qBDjDLP,GAETA,E,iLAEF,OACE,yBAAKiB,GAAG,sB,GAHIG,aEKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OAAO,kBAAC,EAAD,MAASwB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.22b1f376.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport Index from './components/index'\n\nexport default App;\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"colorlib-page\">\n      \n      </div>\n    );\n  }\n}","import React from 'react';\n\nexport default Index;\n\nvar Index = React.createClass({\n  render: function() {\n    return (\n      <div>\n        <title>Gourmet â€” Colorlib Website Template</title>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n        <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,700,800|DM+Serif+Display:400,400i&display=swap\" rel=\"stylesheet\" />\n        <link rel=\"shortcut icon\" href=\"ftco-32x32.png\" />\n        <link href=\"https://fonts.googleapis.com/css?family=Open+Sans:300,400,700,800\" rel=\"stylesheet\" />\n        <link rel=\"stylesheet\" href=\"css/bootstrap.css\" />\n        <link rel=\"stylesheet\" href=\"css/animate.css\" />\n        <link rel=\"stylesheet\" href=\"css/owl.carousel.min.css\" />\n        <link rel=\"stylesheet\" href=\"css/aos.css\" />\n        <link rel=\"stylesheet\" href=\"css/magnific-popup.css\" />\n        <link rel=\"stylesheet\" href=\"fonts/ionicons/css/ionicons.min.css\" />\n        <link rel=\"stylesheet\" href=\"fonts/fontawesome/css/font-awesome.min.css\" />\n        <link rel=\"stylesheet\" href=\"fonts/flaticon/font/flaticon.css\" />\n        {/* Theme Style */}\n        <link rel=\"stylesheet\" href=\"css/style.css\" />\n        <header role=\"banner\">\n          <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n            <div className=\"container\">\n              <a className=\"navbar-brand\" href=\"index.html\">Gourmet</a>\n              <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExample05\" aria-controls=\"navbarsExample05\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\" />\n              </button>\n              <div className=\"collapse navbar-collapse\" id=\"navbarsExample05\">\n                <ul className=\"navbar-nav ml-auto pl-lg-5 pl-0\">\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link active\" href=\"index.html\">Projects</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"recipes.html\">Recipes</a>\n                  </li>\n                  <li className=\"nav-item dropdown\">\n                    <a className=\"nav-link dropdown-toggle\" href=\"services.html\" id=\"dropdown04\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Services</a>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"dropdown04\">\n                      <a className=\"dropdown-item\" href=\"services.html\">Delicious Food</a>\n                      <a className=\"dropdown-item\" href=\"services.html\">Enjoy Drinks</a>\n                      <a className=\"dropdown-item\" href=\"services.html\">Eat All You Can</a>\n                    </div>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"about.html\">About</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"news.html\">News</a>\n                  </li>\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"contact.html\">Contact</a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </nav>\n        </header>\n        {/* END header */}\n    </div>\n  );\n  }\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}